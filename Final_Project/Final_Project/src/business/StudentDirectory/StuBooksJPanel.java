/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package business.StudentDirectory;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import ui.DatabaseConnection;
/**
 *
 * @author Atharv Joshi
 */
public class StuBooksJPanel extends javax.swing.JPanel {

    private final String username;

    /**
     * Creates new form StuBooksJPanel
     */
    public StuBooksJPanel(String username) {
        initComponents();
        this.username=username;
        populateBooksTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblBooks = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        txtbookid = new javax.swing.JTextField();
        btnissuebook = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblMyBooks = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        txtReturnDate = new javax.swing.JTextField();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("AVAILABLE BOOKS IN THE LIBRABRY");

        tblBooks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Title", "Author", "Genre", "ISBN", "BookID", "AvailableQuantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblBooks);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("Enter Book ID:");

        btnissuebook.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnissuebook.setText("Issue Book");
        btnissuebook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnissuebookActionPerformed(evt);
            }
        });

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 0, 0));
        jLabel2.setText("My Books");

        tblMyBooks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "BookID", "IssueID", "ReturnDate", "FinaAmount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, true, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblMyBooks);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setText("Enter Return Date:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtbookid)
                                    .addComponent(txtReturnDate, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(btnissuebook, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(104, 104, 104)))
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 515, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 638, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 848, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(14, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(253, 253, 253))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 209, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(69, 69, 69)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtbookid, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtReturnDate, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29)
                        .addComponent(btnissuebook, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(61, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnissuebookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnissuebookActionPerformed
        try {
        // Get the BookID and ReturnDate from the text fields
        int bookID = Integer.parseInt(txtbookid.getText());
        String returnDate = txtReturnDate.getText();

        // Get the StudentID from the username
        int studentID = getStudentIDFromUsername(username);

        // Check if the book is available
        int availableQuantity = getAvailableQuantity(bookID);
        if (availableQuantity > 0) {
            // Update the AvailableQuantity in library_books
            updateAvailableQuantity(bookID);

            // Insert a new record into the issued_books table
            insertIntoIssuedBooks(studentID, bookID, returnDate);

            // Update the MyBooks table and display the updated values
            updateMyBooksTable(studentID);
            populateBooksTable(); // Refresh the books table

            JOptionPane.showMessageDialog(this, "Book issued successfully!");
        } else {
            JOptionPane.showMessageDialog(this, "Sorry, the selected book is currently unavailable.");
        }

    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Invalid input. Please enter valid data.", "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_btnissuebookActionPerformed

    private int getStudentIDFromUsername(String username) {
   String sql = "SELECT StudentID FROM students WHERE username = ?";

    try (Connection connection = DatabaseConnection.getConnection();
         PreparedStatement preparedStatement = connection.prepareStatement(sql)) {

        preparedStatement.setString(1, username);
        ResultSet resultSet = preparedStatement.executeQuery();

        if (resultSet.next()) {
            return resultSet.getInt("StudentID");
        } else {
            // Handle the case where no student with the given username is found
            JOptionPane.showMessageDialog(this, "Student not found for the given username.", "Error", JOptionPane.ERROR_MESSAGE);
            return -1; // or throw an exception, or use a different sentinel value based on your requirements
        }

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error fetching StudentID. Please try again.", "Error", JOptionPane.ERROR_MESSAGE);
        return -1; // or throw an exception, or use a different sentinel value based on your requirements
    } // Replace with the actual fetched StudentID
}

private void insertIntoIssuedBooks(int studentID, int bookID, String returnDate) {
    // Insert a new record into the issued_books table
    String sql = "INSERT INTO issued_books (StudentID, BookID, ReturnDate) VALUES (?, ?, ?)";
    
    try (Connection connection = DatabaseConnection.getConnection();
         PreparedStatement preparedStatement = connection.prepareStatement(sql)) {
        
        preparedStatement.setInt(1, studentID);
        preparedStatement.setInt(2, bookID);
        preparedStatement.setString(3, returnDate);

        preparedStatement.executeUpdate();

        JOptionPane.showMessageDialog(this, "Book issued successfully!");

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error issuing book. Please try again.", "Error", JOptionPane.ERROR_MESSAGE);
    }
}

private void updateMyBooksTable(int studentID) {
    // Update the MyBooks table and display the updated values
    String sql = "SELECT BookID, IssueID, ReturnDate, FineAmount FROM issued_books WHERE StudentID = ?";

    try (Connection connection = DatabaseConnection.getConnection();
         PreparedStatement preparedStatement = connection.prepareStatement(sql)) {

        preparedStatement.setInt(1, studentID);
        ResultSet resultSet = preparedStatement.executeQuery();

        // Create a DefaultTableModel to hold the data for the table
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("BookID");
        model.addColumn("IssueID");
        model.addColumn("ReturnDate");
        model.addColumn("FineAmount");

        // Populate the model with data from the ResultSet
        while (resultSet.next()) {
            model.addRow(new Object[]{
                    resultSet.getInt("BookID"),
                    resultSet.getInt("IssueID"),
                    resultSet.getString("ReturnDate"),
                    resultSet.getBigDecimal("FineAmount")
            });
        }

        // Set the table model for tblMyBooks
        tblMyBooks.setModel(model);

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error updating MyBooks table. Please try again.", "Error", JOptionPane.ERROR_MESSAGE);
    }
}
    
    
 private void updateAvailableQuantity(int bookID) {
    String updateQuery = "UPDATE library_books SET AvailableQuantity = AvailableQuantity - 1 WHERE BookID = ? AND AvailableQuantity > 0";

    try (Connection connection = DatabaseConnection.getConnection();
         PreparedStatement preparedStatement = connection.prepareStatement(updateQuery)) {

        preparedStatement.setInt(1, bookID);
        preparedStatement.executeUpdate();

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error updating AvailableQuantity. Please try again.", "Error", JOptionPane.ERROR_MESSAGE);
    }
}


    
    private void populateBooksTable() {
        String sql = "SELECT Title, Author, Genre, ISBN, BookID, AvailableQuantity FROM library_books";

        try (Connection connection = DatabaseConnection.getConnection();
             PreparedStatement preparedStatement = connection.prepareStatement(sql);
             ResultSet resultSet = preparedStatement.executeQuery()) {

            // Create a DefaultTableModel to hold the data for the table
            DefaultTableModel model = new DefaultTableModel();
            model.addColumn("Title");
            model.addColumn("Author");
            model.addColumn("Genre");
            model.addColumn("ISBN");
            model.addColumn("BookID");
            model.addColumn("AvailableQuantity");

            // Populate the model with data from the ResultSet
            while (resultSet.next()) {
                model.addRow(new Object[]{
                        resultSet.getString("Title"),
                        resultSet.getString("Author"),
                        resultSet.getString("Genre"),
                        resultSet.getString("ISBN"),
                        resultSet.getInt("BookID"),
                        resultSet.getInt("AvailableQuantity")
                });
            }

            // Set the table model
            tblBooks.setModel(model);

        } catch (SQLException e) {
            // Handle any errors that may occur
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error fetching data from the database", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    private int getAvailableQuantity(int bookID) {
    String sql = "SELECT AvailableQuantity FROM library_books WHERE BookID = ?";

    try (Connection connection = DatabaseConnection.getConnection();
         PreparedStatement preparedStatement = connection.prepareStatement(sql)) {

        preparedStatement.setInt(1, bookID);
        ResultSet resultSet = preparedStatement.executeQuery();

        if (resultSet.next()) {
            return resultSet.getInt("AvailableQuantity");
        } else {
            // Handle the case where no book with the given BookID is found
            JOptionPane.showMessageDialog(this, "Book not found for the given BookID.", "Error", JOptionPane.ERROR_MESSAGE);
            return -1; // or throw an exception, or use a different sentinel value based on your requirements
        }

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error fetching AvailableQuantity. Please try again.", "Error", JOptionPane.ERROR_MESSAGE);
        return -1; // or throw an exception, or use a different sentinel value based on your requirements
    }
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnissuebook;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblBooks;
    private javax.swing.JTable tblMyBooks;
    private javax.swing.JTextField txtReturnDate;
    private javax.swing.JTextField txtbookid;
    // End of variables declaration//GEN-END:variables
}
