/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package business.StudentDirectory;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import ui.DatabaseConnection;

/**
 *
 * @author Atharv Joshi
 */
public class StuTranscriptJPanel extends javax.swing.JPanel {

    /**
     * Creates new form StuTranscriptJPanel
     */
    public StuTranscriptJPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtStudentID = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        btnShowDegree = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        txtGrade = new javax.swing.JTextField();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("Yu Gothic", 1, 18)); // NOI18N
        jLabel1.setText("Check If Available for Degree ");

        jLabel2.setFont(new java.awt.Font("Yu Gothic", 0, 12)); // NOI18N
        jLabel2.setText("Student ID");

        btnShowDegree.setBackground(new java.awt.Color(51, 51, 255));
        btnShowDegree.setFont(new java.awt.Font("Yu Gothic", 0, 12)); // NOI18N
        btnShowDegree.setForeground(new java.awt.Color(255, 255, 255));
        btnShowDegree.setText("Show Degree");
        btnShowDegree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowDegreeActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "CourseID", "CourseName", "Credits", "Grade"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel3.setText("You Have Recieved");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(213, 213, 213)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(191, 191, 191)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtStudentID, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(106, 106, 106)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 603, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(314, 314, 314)
                        .addComponent(btnShowDegree, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(184, 184, 184)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(54, 54, 54)
                        .addComponent(txtGrade, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(695, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtStudentID, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3)))
                .addGap(26, 26, 26)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtGrade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(108, 108, 108)
                .addComponent(btnShowDegree, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(333, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private int getGradeValue(String calculatedGradeText) {
    switch (calculatedGradeText) {
        case "A":
            return 800;
        case "B":
            return 700; // Adjusted to the appropriate range for "B" grade
        case "C":
            return 600; // Adjusted to the appropriate range for "C" grade
        case "Failed":
            return 0;
        default:
            return 0;
    }
}


    private void btnShowDegreeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowDegreeActionPerformed

        String studentID = txtStudentID.getText();

        try (Connection connection = DatabaseConnection.getConnection();) {

            // Fetch course details and grades for the given studentID
            String query = "SELECT s.CourseID, c.CourseName, c.Credits, s.Grade "
                    + "FROM studentcourseenrollment s "
                    + "JOIN courses c ON s.CourseID = c.CourseID "
                    + "WHERE s.StudentID = ?";
            try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
                preparedStatement.setString(1, studentID);
                ResultSet resultSet = preparedStatement.executeQuery();

                DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
                model.setRowCount(0); // Clear existing table data

                while (resultSet.next()) {
                    int courseID = resultSet.getInt("CourseID");
                    String courseName = resultSet.getString("CourseName");
                    int credits = resultSet.getInt("Credits");
                    String gradeText = resultSet.getString("Grade");
                    int grade = Integer.parseInt(gradeText);

                    // Calculate grade based on the given criteria
                    String calculatedGradeText;
                    if (grade >= 750 && grade <= 800) {
                        calculatedGradeText = "A";
                    } else if (grade >= 650 && grade < 750) {
                        calculatedGradeText = "B";
                    } else if (grade >= 550 && grade < 650) {
                        calculatedGradeText = "C";
                    } else if (grade == -1) {
                        calculatedGradeText = "Not Available";
                    } else {
                        calculatedGradeText = String.valueOf(grade); // Display the actual grade
                    }

                    model.addRow(new Object[]{courseID, courseName, credits, calculatedGradeText});

                }

                // Display the total grade only if all grades are available
                // Display the total grade only if all grades are available
if (model.getRowCount() >= 8) {
                    int totalGrade = 0;
                    for (int i = 0; i < model.getRowCount(); i++) {
                        String gradeText = (String) model.getValueAt(i, 3);

                        // Skip "Failed" grades in the total grade calculation
                        if (!gradeText.equals("Failed")) {
                            // Use calculatedGradeText directly instead of getGradeValue
                            totalGrade += Integer.parseInt(gradeText);
                        }
                    }

                    String overallGrade;
                    if (totalGrade >= 750 && totalGrade <= 800) {
                        overallGrade = "A";
                    } else if (totalGrade >= 650 && totalGrade < 750) {
                        overallGrade = "B";
                    } else if (totalGrade >= 550 && totalGrade < 650) {
                        overallGrade = "C";
                    } else {
                        overallGrade = "Failed";
                    }

                    // Set the overall grade in txtGrade
                    txtGrade.setText(overallGrade);
                    JOptionPane.showMessageDialog(this, "Degree Granted!", "Success", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, "No degree awarded. Complete more courses.", "Sorry", JOptionPane.ERROR_MESSAGE);
                }

            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error: Unable to fetch data or check degree qualification.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnShowDegreeActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnShowDegree;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField txtGrade;
    private javax.swing.JTextField txtStudentID;
    // End of variables declaration//GEN-END:variables
}
