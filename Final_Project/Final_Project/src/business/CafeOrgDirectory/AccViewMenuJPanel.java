/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package business.CafeOrgDirectory;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import ui.DatabaseConnection;

/**
 *
 * @author Atharv Joshi
 */
public class AccViewMenuJPanel extends javax.swing.JPanel {

    /**
     * Creates new form AccViewMenuJPanel
     */
    private DefaultTableModel model;
    public AccViewMenuJPanel() {
         initComponents();
        model = (DefaultTableModel) tblMenu.getModel();
        populateMenuTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblMenu = new javax.swing.JTable();
        lblPrice = new javax.swing.JLabel();
        txtItemName = new javax.swing.JTextField();
        btnUpdatePrice = new javax.swing.JButton();
        txtRevised = new javax.swing.JTextField();
        lblPrice1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("UNIVERISTY MENU HERE");

        tblMenu.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ItemName", "Description", "Type", "TotalAmount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblMenu);

        lblPrice.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblPrice.setForeground(new java.awt.Color(0, 0, 0));
        lblPrice.setText(" Item Name");

        btnUpdatePrice.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnUpdatePrice.setText("Update Price");
        btnUpdatePrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdatePriceActionPerformed(evt);
            }
        });

        lblPrice1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblPrice1.setForeground(new java.awt.Color(0, 0, 0));
        lblPrice1.setText("Revised Price");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 643, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 865, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(96, 96, 96)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblPrice1, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtRevised, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnUpdatePrice, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtItemName, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(48, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtItemName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPrice1, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtRevised, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addComponent(btnUpdatePrice)
                .addContainerGap(47, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnUpdatePriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdatePriceActionPerformed
            // Get the input values from the text fields
    String itemName = txtItemName.getText().trim();
    String revisedPriceText = txtRevised.getText().trim();

    // Validate input
    if (itemName.isEmpty() || revisedPriceText.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please enter both Item Name and Revised Price.", "Input Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    try {
        // Parse the revised price as a double
        double revisedPrice = Double.parseDouble(revisedPriceText);

        // Validate that the revised price is non-negative
        if (revisedPrice < 0) {
            JOptionPane.showMessageDialog(this, "Revised Price cannot be negative.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Update the database with the revised price for the specified item
        updatePriceInDatabase(itemName, revisedPrice);

        // Update the table model with the new price
        updateTableModel(itemName, revisedPrice);

        // Clear the text fields
        txtItemName.setText("");
        txtRevised.setText("");

        // Show a success message
        JOptionPane.showMessageDialog(this, "Price updated successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
    } catch (NumberFormatException ex) {
        // Handle the case where the user entered an invalid number for the revised price
        JOptionPane.showMessageDialog(this, "Please enter a valid number for the Revised Price.", "Input Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_btnUpdatePriceActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnUpdatePrice;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblPrice;
    private javax.swing.JLabel lblPrice1;
    private javax.swing.JTable tblMenu;
    private javax.swing.JTextField txtItemName;
    private javax.swing.JTextField txtRevised;
    // End of variables declaration//GEN-END:variables

private void populateMenuTable() {
        model.setRowCount(0);

        // Database connection parameters

        String query = "SELECT ItemName, Description, Type, TotalAmount FROM dining_orders";

        try (Connection connection = DatabaseConnection.getConnection();

             PreparedStatement preparedStatement = connection.prepareStatement(query);
             ResultSet resultSet = preparedStatement.executeQuery()) {

            // Populate the table model with data from the ResultSet
            while (resultSet.next()) {
                String ItemName = resultSet.getString("ItemName");
                String Description = resultSet.getString("Description");
                String Type = resultSet.getString("Type");
                int TotalAmount = resultSet.getInt("TotalAmount");

                // Add a row to the table model
                model.addRow(new Object[]{ItemName, Description, Type, TotalAmount});
            }

        } catch (SQLException ex) {
            // Handle exceptions (e.g., show an error message).
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace(); // Logging the exception might be helpful for debugging
        }
    }

private void updatePriceInDatabase(String itemName, double revisedPrice) {
    // Database connection parameters
    String query = "UPDATE dining_orders SET TotalAmount = ? WHERE ItemName = ?";

    try (Connection connection = DatabaseConnection.getConnection();
         PreparedStatement preparedStatement = connection.prepareStatement(query)) {

        // Set the parameters for the prepared statement
        preparedStatement.setDouble(1, revisedPrice);
        preparedStatement.setString(2, itemName);

        // Execute the update query
        preparedStatement.executeUpdate();

    } catch (SQLException ex) {
        // Handle exceptions (e.g., show an error message).
        JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        ex.printStackTrace(); // Logging the exception might be helpful for debugging
    }
}

private void updateTableModel(String itemName, double revisedPrice) {
    // Find the row index for the specified item in the table model
    int rowIndex = -1;
    for (int i = 0; i < model.getRowCount(); i++) {
        if (model.getValueAt(i, 0).equals(itemName)) {
            rowIndex = i;
            break;
        }
    }

    // If the item is found in the table model, update the price
    if (rowIndex != -1) {
        model.setValueAt(revisedPrice, rowIndex, 3);
    }
}

}
