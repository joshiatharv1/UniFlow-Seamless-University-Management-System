/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package business.CafeEndUsers;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import ui.DatabaseConnection;

/**
 *
 * @author Atharva
 */
public class EndUsers extends javax.swing.JPanel {

    /**
     * Creates new form EndUsers
     */
    private String selectedMenuItemName;
    private double selectedTotalAmount;
    private String username;

    public EndUsers(String username) {
        initComponents();
        populateMenuTable();
        this.username = username;
        tblallmenu.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                int selectedRow = tblallmenu.getSelectedRow();
                if (selectedRow != -1) {
                    selectedMenuItemName = tblallmenu.getValueAt(selectedRow, 0).toString(); // Assuming ItemName is in the first column
                    selectedTotalAmount = Double.parseDouble(tblallmenu.getValueAt(selectedRow, 4).toString()); // Assuming TotalAmount is in the fifth column
                    displaySelectedItemDetails();
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblallmenu = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        txtItemName = new javax.swing.JTextField();
        btnBookOrder = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        txtTotalAmount = new javax.swing.JTextField();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Yu Gothic", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Menu");

        tblallmenu.setFont(new java.awt.Font("Yu Gothic", 0, 12)); // NOI18N
        tblallmenu.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ItemName", "Description", "Type", "Rating", "TotalAmount", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblallmenu);

        jLabel8.setFont(new java.awt.Font("Yu Gothic", 1, 12)); // NOI18N
        jLabel8.setText("Price:");

        btnBookOrder.setBackground(new java.awt.Color(51, 51, 255));
        btnBookOrder.setFont(new java.awt.Font("Yu Gothic", 1, 12)); // NOI18N
        btnBookOrder.setForeground(new java.awt.Color(255, 255, 255));
        btnBookOrder.setText("Place order");
        btnBookOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBookOrderActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Yu Gothic", 1, 12)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Order");

        jLabel10.setFont(new java.awt.Font("Yu Gothic", 1, 12)); // NOI18N
        jLabel10.setText("Item:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 687, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 687, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(txtTotalAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnBookOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtItemName, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap(46, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 293, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtItemName, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTotalAmount, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnBookOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(302, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private int getStudentIDFromUsername(String username) {
        int studentID = -1;
        
        String query = "SELECT studentID FROM students WHERE username = ?";

        try (Connection connection = DatabaseConnection.getConnection(); PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            preparedStatement.setString(1, username);

            try (ResultSet resultSet = preparedStatement.executeQuery()) {
                if (resultSet.next()) {
                    studentID = resultSet.getInt("studentID");
                    System.out.println("Username: " + username);
                }
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }

        return studentID;
    }

    private void displaySelectedItemDetails() {
        txtItemName.setText(selectedMenuItemName);
        txtTotalAmount.setText(String.valueOf(selectedTotalAmount));
    }

    private void updateOrderInUserOrders(int studentID, String itemName, double totalAmount) {
        String query = "INSERT INTO user_orders (User_ID, ItemName, Price, Status) VALUES (?, ?, ?, 'Preparing')";

        try (Connection connection = DatabaseConnection.getConnection(); PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            preparedStatement.setInt(1, studentID);
            preparedStatement.setString(2, itemName);
            preparedStatement.setDouble(3, totalAmount);
            preparedStatement.executeUpdate();

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void btnBookOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBookOrderActionPerformed

     int selectedRow = tblallmenu.getSelectedRow();

    // Check if a row is selected
    if (selectedRow != -1) {
        // Get data from the selected row
        String itemName = tblallmenu.getValueAt(selectedRow, 0).toString();
        double totalAmount = Double.parseDouble(tblallmenu.getValueAt(selectedRow, 4).toString());
        int studentID = getStudentIDFromUsername(username);

        // Check if the item is available (Quantity > 0)
        int quantity = Integer.parseInt(tblallmenu.getValueAt(selectedRow, 5).toString());
        if (quantity > 0) {
            // Update order in user_orders
            updateOrderInUserOrders(studentID, itemName, totalAmount);

            // Update Quantity in dining_orders
            updateQuantityInDiningOrders(itemName);

            JOptionPane.showMessageDialog(this, "Order placed successfully!");
        } else {
            JOptionPane.showMessageDialog(this, "Sorry, the item is currently unavailable.");
        }
    } else {
        JOptionPane.showMessageDialog(this, "Please select an item from the menu to place an order.");
    }
    }//GEN-LAST:event_btnBookOrderActionPerformed
    
     private void populateMenuTable() {
        String[] columnNames = {"ItemName", "Description", "Type", "Rating", "TotalAmount", "Quantity"};
        DefaultTableModel model = new DefaultTableModel(columnNames, 0);
        String query = "SELECT ItemName, Description, Type, Rating, TotalAmount, Quantity FROM dining_orders";

        try (Connection connection = DatabaseConnection.getConnection(); PreparedStatement preparedStatement = connection.prepareStatement(query); ResultSet resultSet = preparedStatement.executeQuery()) {
            while (resultSet.next()) {
                String itemName = resultSet.getString("ItemName");
                String description = resultSet.getString("Description");
                String type = resultSet.getString("Type");
                int rating = resultSet.getInt("Rating");
                double totalAmount = resultSet.getDouble("TotalAmount");
                int Quantity = resultSet.getInt("Quantity");

                Object[] rowData = {itemName, description, type, rating, totalAmount, Quantity};
                model.addRow(rowData);
            }

            tblallmenu.setModel(model);

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private void updateQuantityInDiningOrders(String itemName) {
    String updateQuery = "UPDATE dining_orders SET Quantity = Quantity - 1 WHERE ItemName = ? AND Quantity > 0";

    try (Connection connection = DatabaseConnection.getConnection(); PreparedStatement preparedStatement = connection.prepareStatement(updateQuery)) {
        preparedStatement.setString(1, itemName);
        preparedStatement.executeUpdate();
    } catch (SQLException e) {
        e.printStackTrace();
    }

    // Refresh the menu table after updating the quantity
    populateMenuTable();
}
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBookOrder;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblallmenu;
    private javax.swing.JTextField txtItemName;
    private javax.swing.JTextField txtTotalAmount;
    // End of variables declaration//GEN-END:variables

}